# -*- coding: utf-8 -*-

import torch
import pandas as pd
import numpy as np
from PIL import Image

from .function_calc import 计算月供, 计算总月供, 合并资金池和月度收支图
from .function_suggestion import 房价建议, 首付建议, 月供建议, 购房对比不购房建议, 失业建议, 资金风险提示, 购房成本, 卖房收益, 购房对比不购房资金池最终值


# Tensor to PIL
def tensor2pil(image):
    return Image.fromarray(np.clip(255. * image.cpu().numpy().squeeze(), 0, 255).astype(np.uint8))

# Convert PIL to Tensor


def pil2tensor(image):
    return torch.from_numpy(np.array(image).astype(np.float32) / 255.0).unsqueeze(0)


class BK_HousingDecision:

    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "初始资金池": ("INT", {"default": 1000000, "min": 0, "max": 99999999999}),
                "房价": ("INT", {"default": 2500000, "min": 0, "max": 99999999999}),
                "首付比例": ("FLOAT", {"default": 0.3, "min": 0, "max": 1, "step": 0.01, "display": "slider"}),
                "交房等待月份": ("INT", {"default": 24, "min": 0, "max": 100}),
                "房贷年限": ("INT", {"default": 20, "min": 0, "max": 100}),
                "公积金贷款额度": ("INT", {"default": 600000, "min": 0, "max": 99999999999}),
                "公积金贷款利率": ("FLOAT", {"default": 0.0285, "min": 0, "max": 1, "step": 0.0001}),
                "商业贷款利率": ("FLOAT", {"default": 0.029, "min": 0, "max": 1, "step": 0.0001}),
                "未来是否卖出房产": ("BOOLEAN", {"default": True}),
                "卖出月份": ("INT", {"default": 84, "min": 0}),
                "房产增值率": ("FLOAT", {"default": 0.2, "min": -1, "max": 10, "step": 0.01}),
                "月开销": ("INT", {"default": 5000, "min": 0, "max": 99999999999}),
                "租房费用": ("INT", {"default": 5000, "min": 0, "max": 99999999999}),
                "月收入": ("INT", {"default": 15000, "min": 0, "max": 99999999999}),
                "工资年涨幅": ("FLOAT", {"default": 0.05, "min": 0, "max": 1, "step": 0.01}),
                "公积金": ("INT", {"default": 5000, "min": 0, "max": 99999999999}),
                "年终奖": ("INT", {"default": 50000, "min": 0, "max": 99999999999}),
                "剩余工作年限": ("INT", {"default": 3, "min": 0, "max": 100}),
                "年化收益率": ("FLOAT", {"default": 0.02, "min": 0, "max": 1, "step": 0.01}),
                "通货膨胀率": ("FLOAT", {"default": 0.005, "min": 0, "max": 1, "step": 0.001}),
                "地区房价指数": ("FLOAT", {"default": 1.0, "min": 0, "max": 10, "step": 0.01}),
                "地区首付比例要求": ("FLOAT", {"default": 0.15, "min": 0, "max": 1, "step": 0.01,"display": "slider"}),
                "地区月供收入比上限": ("FLOAT", {"default": 50.0, "min": 0, "max": 100, "step": 0.1}),
                "地区房价增长预期": ("FLOAT", {"default": 0.05, "min": -1, "max": 1, "step": 0.01}),
                "地区失业率": ("FLOAT", {"default": 0.05, "min": 0, "max": 1, "step": 0.01}),
                "地区经济增长预期": ("FLOAT", {"default": 0.03, "min": -1, "max": 1, "step": 0.01}),
            },
        }

    RETURN_TYPES = ("IMAGE", "STRING")
    RETURN_NAMES = ("趋势图", "结论")
    FUNCTION = "calculate_housing_decision"
    OUTPUT_NODE = True
    CATEGORY = "⭐️ Baikong"

    def calculate_housing_decision(self, 初始资金池, 房价, 首付比例, 交房等待月份, 房贷年限, 公积金贷款额度, 公积金贷款利率, 商业贷款利率,
                                   未来是否卖出房产, 卖出月份, 房产增值率, 月开销, 租房费用, 月收入, 工资年涨幅, 公积金,
                                   年终奖, 剩余工作年限, 年化收益率, 通货膨胀率, 地区房价指数, 地区首付比例要求, 地区月供收入比上限, 地区房价增长预期, 地区失业率, 地区经济增长预期):
        首付 = 房价 * 首付比例
        剩余资金 = 初始资金池 - 首付
        还款方式 = "等额本息"
        失业后年限 = 房贷年限 - 剩余工作年限
        公积金贷款额度 = min(公积金贷款额度, 房价 - 首付)
        商业贷款额度 = max(0, 房价 - 首付 - 公积金贷款额度)

        # 计算月供
        月供 = 计算总月供(公积金贷款额度, 商业贷款额度, 公积金贷款利率, 商业贷款利率, 房贷年限 * 12)

        # 初始化数据
        月数 = (剩余工作年限 + 失业后年限) * 12
        资金池, 无购房资金池 = [剩余资金], [初始资金池]
        收入列表, 开销列表, 月供列表, 公积金列表 = [], [], [], []
        月结余列表, 月结余_不含大额变动列表, 利息收入列表, 租房费用列表 = [], [], [], []
        房贷余额列表 = [公积金贷款额度 + 商业贷款额度]
        月利率 = 商业贷款利率 / 12

        失业后最低月结余 = float('inf')  # 初始化为正无穷大
        最低资金池 = float('inf')  # 初始化为正无穷大

        for i in range(月数):
            通货膨胀系数 = (1 + 通货膨胀率) ** (i / 12)
            当前月收入, 当前公积金, 当前月开销 = self.calculate_monthly_income_expense(
                i, 月收入, 工资年涨幅, 公积金, 月开销, 通货膨胀系数, 剩余工作年限)

            月收入总额 = 当前月收入 + 当前公积金
            当前月供, 新房贷余额 = self.calculate_loan_payment(
                i, 交房等待月份, 卖出月份, 未来是否卖出房产, 月供, 房贷余额列表, 月利率, 还款方式, 公积金贷款额度, 房贷年限)

            房贷余额列表.append(新房贷余额)
            当前租房费用 = self.calculate_rent_expense(
                i, 交房等待月份, 卖出月份, 未来是否卖出房产, 租房费用, 通货膨胀系数)

            月支出总额 = 当前月开销 + 当前月供 + 当前租房费用
            月结余 = 月收入总额 - 月支出总额
            月结余_不含大额变动 = 月结余

            # 计算利息收入
            月利息 = 资金池[-1] * (年化收益率 / 12)

            # 年终奖
            if (i + 1) % 12 == 0 and i < 剩余工作年限 * 12:
                月结余 += 年终奖
                月结余_不含大额变动 += 年终奖

            # 卖出房产
            if 未来是否卖出房产 and i == 交房等待月份 + 卖出月份:
                卖出价格 = 房价 * (1 + 房产增值率)
                月结余 += 卖出价格 - 房贷余额列表[-1]
                房贷余额列表[-1] = 0

            新资金池 = 资金池[-1] + 月结余 + 月利息
            资金池.append(新资金池)

            # 无购房资金池
            无购房月支出总额 = 当前月开销 + 租房费用 * 通货膨胀系数
            无购房月结余 = 月收入总额 - 无购房月支出总额
            无购房月利息 = 无购房资金池[-1] * (年化收益率 / 12)
            if (i + 1) % 12 == 0 and i < 剩余工作年限 * 12:
                无购房月结余 += 年终奖
            新无购房资金池 = 无购房资金池[-1] + 无购房月结余 + 无购房月利息
            无购房资金池.append(新无购房资金池)

            # 更新列表
            收入列表.append(当前月收入)
            开销列表.append(当前月开销)
            月供列表.append(当前月供)
            公积金列表.append(当前公积金)
            月结余列表.append(月结余)
            月结余_不含大额变动列表.append(月结余_不含大额变动)
            利息收入列表.append(月利息)
            租房费用列表.append(当前租房费用)

            # 更新失业后最低月结余
            if i >= 剩余工作年限 * 12:
                失业后最低月结余 = min(失业后最低月结余, 月结余)

            # 更新最低资金池
            最低资金池 = min(最低资金池, 新资金池)

        购房与不购房资金差异 = 资金池[-1] - 无购房资金池[-1]

        # 创建 DataFrame
        df = pd.DataFrame({
            '月份': range(1, 月数 + 1),
            '资金池': 资金池[1:],
            '无购房资金池': 无购房资金池[1:],
            '房贷余额': 房贷余额列表[1:],
            '月收入': 收入列表,
            '公积金': 公积金列表,
            '月收入总额': [a + b for a, b in zip(收入列表, 公积金列表)],
            '月开销': 开销列表,
            '月供': 月供列表,
            '租房费用': 租房费用列表,
            '月支出总额': [a + b + c for a, b, c in zip(开销列表, 月供列表, 租房费用列表)],
            '月结余': 月结余列表,
            '月结余_不含大额变动': 月结余_不含大额变动列表,
            '利息收入': 利息收入列表,
            '年终奖': [年终奖 if (i + 1) % 12 == 0 and i < 剩余工作年限 * 12 else 0 for i in range(月数)]
        })

        # 生成图表和结论
        image = 合并资金池和月度收支图(df, 房价, 首付, 房贷年限, 剩余工作年限, 交房等待月份, 未来是否卖出房产, 卖出月份)
        conclusion = self.generate_conclusion(
            df, 房价, 首付, 首付比例, 月供, 月收入, 公积金, 房贷年限, 未来是否卖出房产, 交房等待月份, 卖出月份, 房产增值率,
            地区房价指数, 地区首付比例要求, 地区月供收入比上限, 地区房价增长预期, 地区失业率, 地区经济增长预期,
            失业后最低月结余, 最低资金池, 购房与不购房资金差异, 月供列表, 租房费用列表, 资金池, 无购房资金池)

        pilImg = pil2tensor(image)
        return (pilImg, conclusion)

    def calculate_monthly_income_expense(self, i, 月收入, 工资年涨幅, 公积金, 月开销, 通货膨胀系数, 剩余工作年限):
        if i < 剩余工作年限 * 12:
            当前月收入 = 月收入 * (1 + 工资年涨幅) ** (i // 12)
            当前公积金 = 公积金 * (1 + 工资年涨幅) ** (i // 12)
            当前月开销 = 月开销 * 通货膨胀系数
        else:
            当前月收入 = 0
            当前公积金 = 0
            当前月开销 = 月开销 * 0.6 * 通货膨胀系数
        return 当前月收入, 当前公积金, 当前月开销

    def calculate_loan_payment(self, i, 交房等待月份, 卖出月份, 未来是否卖出房产, 月供, 房贷余额列表, 月利率, 还款方式, 公积金贷款额度, 房贷年限):
        if i < 交房等待月份 + 卖出月份 if 未来是否卖出房产 else 月数:
            if 还款方式 == "等额本息":
                当前月供 = 月供
                房贷利息 = 房贷余额列表[-1] * 月利率
                房贷本金 = 当前月供 - 房贷利息
            else:
                当前月供 = 月供列表[min(i, len(月供列表) - 1)] if i < 房贷年限 * 12 else 0
                房贷本金 = 公积金贷款额度 / (房贷年限 * 12) if i < 房贷年限 * 12 else 0
                房贷利息 = 当前月供 - 房贷本金
            新房贷余额 = max(0, 房贷余额列表[-1] - 房贷本金)
        else:
            当前月供 = 0
            新房贷余额 = 0
        return 当前月供, 新房贷余额

    def calculate_rent_expense(self, i, 交房等待月份, 卖出月份, 未来是否卖出房产, 租房费用, 通货膨胀系数):
        if i < 交房等待月份 or (未来是否卖出房产 and i >= 交房等待月份 + 卖出月份):
            return 租房费用 * 通货膨胀系数
        return 0

    def generate_conclusion(self, df, 房价, 首付, 首付比例, 月供, 月收入, 公积金, 房贷年限, 未来是否卖出房产, 交房等待月份, 卖出月份, 房产增值率,
                            地区房价指数, 地区首付比例要求, 地区月供收入比上限, 地区房价增长预期, 地区失业率, 地区经济增长预期,
                            失业后最低月结余, 最低资金池, 购房与不购房资金差异, 月供列表, 租房费用列表, 资金池, 无购房资金池):
        # 生成结论的逻辑
        conclusion = f"""
买房决策分析结果：

1. 房价收入比: {房价/(月收入*12):.2f}
2. 首付比例: {首付比例*100:.2f}%
3. 月供收入比: {(月供/(月收入+公积金))*100:.2f}%
4. 房贷年限: {房贷年限} 年
5. {'计划在第 ' + str(round((交房等待月份 + 卖出月份)/12)) + ' 年以 ' + f'{房价 * (1 + 房产增值率)/10000:.2f}' + ' 万元卖出' if 未来是否卖出房产 else '计划长期持有'}
6. 购房vs不购房最终资金池差异: {(df['资金池'].iloc[-1] - df['无购房资金池'].iloc[-1])/10000:.2f} 万元

建议：
1. {房价建议(房价, 月收入, 地区房价指数)}
2. {首付建议(首付比例*房价, 房价, 地区首付比例要求*100)}
3. {月供建议(月供, 月收入, 公积金, 地区月供收入比上限)}
4. {购房对比不购房建议((df['资金池'].iloc[-1] - df['无购房资金池'].iloc[-1]), 地区房价增长预期)}
5. {失业建议(失业后最低月结余, 地区失业率)}
6. {资金风险提示(最低资金池, 房贷年限, 购房与不购房资金差异, 地区经济增长预期)}
7. 购房成本{购房成本(房价, 交房等待月份, 首付, 月供, 月收入, 公积金, 房贷年限)}
8. 卖房收益{卖房收益(房价, 首付, 房产增值率, 月供列表, 租房费用列表, 交房等待月份, 卖出月份, 未来是否卖出房产)}
9. {购房对比不购房资金池最终值(资金池, 无购房资金池)}
        """
        return conclusion


